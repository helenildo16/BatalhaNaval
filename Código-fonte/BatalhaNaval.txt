--imprime o tabuleiro, Existem dois tipos de impressão:
--*Impresão normal onde o tabuleiro mostra-rá todas as posições abertas;
--*Impressão especial onde o tabuleiro mostra-rá todas as posições ocultando os navios;

--@Param tabuleiro -> tabuleiro a ser impresso.
--@Param oposto -> Define se a impressão do tabuleiro será normal ou especial.
imprimeTabuleiro = function(tabuleiro, oposto)
  if(oposto == false) then
    for linha=1,10 do
	mostra=""
	for coluna=1,10 do
	   mostra=mostra..tabuleiro[linha][coluna].."\t"
	end
	   print(mostra)
    end
  else
    for linha=1,10 do
	mostra=""
	for coluna=1,10 do
	   if(tabuleiro[linha][coluna] == 1) then
	   	mostra=mostra.."0".."\t"
	   else
	   mostra=mostra..tabuleiro[linha][coluna].."\t"
	   end
	end
	   print(mostra)
    end
  end
end

----------------------------------------------------------------------
--Função de criação dos tabuleiros
--@Return -> retorna tabuleiro tamanho 10x10.
--			 obs: tabuleiros criados já são preechidos com valor 0 (Mar).
criarTabuleiro = function ()
    T = {}
    for linha=1,10 do
      T[linha] = {}
      for coluna=1,10 do
        T[linha][coluna] = 0
      end
    end
  return T
end
-----------------------------------------------------------------------------
-- sessão para digitação das posições dos navios
--@Param tabuleiro--> tabuleiro onde os navios serão posicionados
posicionarNavios = function(tabuleiro)

	imprimeTabuleiro(tabuleiro,false)
	print ("Digite a posição do "..rodada.." ° ".."navio")
	print("X:")
	x = io.read("*number")

	print("Digite a posição do "..rodada.." ° ".."navio")
	print("Y:")
	y = io.read("*number")

	verifica = true

	while(verifica) do
--verifica se o "x" e "y" é maior que 0 e menor ou igual a 10
		if((x < 1 or x > 10) or (y < 1 or y > 10) or tabuleiro[x][y] == 1)then
			x = nil
			y = nil
			print("Posição inválida, digite novamente!")
			print("x:")
			x = io.read("*number")
			print("y:")
			y = io.read("*number")
		else
			print("posição válida!")
			tabuleiro[x][y] = 1
			verifica = false
		end
	end
end